# -*-tcl-*-
# Implementation of the steenrod::algebra command 
#
# Copyright (C) 2006 Christian Nassau <nassau@nullhomotopie.de>
#
#  $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

namespace eval steenrod::algebra {}

proc steenrod::algebra {args} {
    if {![llength $args]} {
        error {wrong \# args: should be "algebra subcommand ?args?"}
    }
    if {[info commands ::steenrod::algebra::[lindex $args 0]] eq ""} {
        foreach subcmd [lsort [info commands ::steenrod::algebra::\[a-z\]*]] {
            lappend scmds [namespace tail $subcmd]
        }
        error "bad subcommand [lindex $args 0]: must be [join $scmds {, }]"
    }
    eval [list ::steenrod::algebra:: [lindex $args 0]] [lrange $args 1 end]
}

proc steenrod::algebra:: args {eval $args}



proc steenrod::algebra::name {profile} {
    foreach {ext red} $profile break
    set r2 [list]
    foreach exp $red {
        switch -regexp -- $exp {
            \[0-9\]+ {
                lappend r2 [format %d $exp]
                continue
            }
            full {
                lappend r2 full
                break
            }
        } 
        error "illegal exponent $exp"
    }
    return E${ext}R[join $r2 -]
}

proc steenrod::algebra::parse {name} {
    
    # try to parse it from filename format
    if {[regexp {E([-0-9]+)R(.*)} $name total extpart redpart]} {
        #puts "$alg => extpart $extpart redpart $redpart"
        set rcoffs [list]
        foreach comp [split $redpart -] {
            switch -- $comp {
                full {
                    lappend rcoffs full
                }
                default {
                    if {![string is integer -strict $comp]} {
                        error "expected integer, got $comp"
                    }
                    lappend rcoffs [expr {int($comp)}]
                }
            }
        }
        return [list $extpart $rcoffs]
    }
  
    if {$name eq "full"} {
        return {-1 full}
    }

    if {$name eq "reduced"} {
        return {0 full}
    }

    error "algebra \"$name\" not understood"
}

proc steenrod::algebra::exponent {profile index} {
    set isfull [lsearch [lindex $profile 1] "full"]
    if {($isfull >= 0) && ($index >= $isfull)} {
        return 100
    }     
    set exp [lindex $profile 1 $index]
    if {[string length $exp]} {
        return $exp
    }
    return 0
}

proc steenrod::algebra::contains {prof1 prof2} {
    foreach {e1 r1} $prof1 break
    foreach {e2 r2} $prof2 break
    if {($e1 &  $e2) != $e2} {
        return false
    }
    set i 0
    foreach exp $r2 {
        if {[exponent $prof1 $i] < [exponent $prof2 $i]} {
            return false
        }
        incr i
    }
    return true
}

proc steenrod::algebra::equal {a1 a2} {
    expr {[contains $a1 $a2] && [contains $a2 $a1]}
}

proc steenrod::algebra::span {args} {

    # expect a list of profiles and compute their span

    if {0 == [llength $args]} {
        return [list 0 {}]
    }
    
    set ext 0
    set red {}

    set isnegative false
    set N 0
    set nargs [list]
    foreach arg $args {
        set i 1
        foreach e [lindex $arg 1] {
            set exp [exponent $arg [expr {$i-1}]]
            set aux [expr {$exp+$i}]
            if {$aux > $N} {set N $aux}
            incr i
        }
        set aux [lindex $arg 0]
        set bux [expr {($aux<0) ? -1 : 0}]
        if {$bux < 0} {set isnegative true}
        while {($aux >> $N) != $bux} {
            incr N
        }
        lappend nargs [string map {full 100} $arg]
    }
    set args $nargs

    if {$isnegative} {
        set ext [expr {-1 << $N}]
    }

    for {set i 0} {$i<=$N} {incr i} {

        set span [list $ext $red]

        # check if Q_i is in span

        set qi [expr {1 << $i}]
        set nq 0
        foreach alg $args {
            if {$qi & [lindex $alg 0]} {
                set nq $qi
                break
            }
        }

        if {!$nq} {
            for {set j 0} {$j<$i} {incr j} {
                # use "xi_{i-j}^p{j} \tensor \tau_j" from Delta(tau_i)

                set spanexp [exponent $span [expr {$i-$j-1}]]

                set st_contains_xi [expr {$spanexp > $j}]
                set st_contains_tau [expr {[lindex $span 0] & (1 << $j)}]
                if {$st_contains_xi && $st_contains_tau} {
                    set nq $qi
                    break
                }
            }
        }

        set ext [expr {$ext | $nq}]

        # determine largest P(0,...,0,p^k) in span

        set max 0
        foreach alg $args {
            set x [exponent $alg $i]
            if {$x > $max} {set max $x}
        }
        if {$max >= 100} {set max 1000}

        for {set j 1} {$j<=$i} {incr j} {
            # use "xi_{i-j+1}^p{j} \tensor \xi_j" from Delta(xi_i+1)
            set m1 [exponent $span [expr {$i-$j}]]
            if {$m1>=100} {set m1 1000}
            incr m1 -$j
            set m2 [exponent $span [expr {$j-1}]]
            if {$m2>=100} {set m2 1000}
            set min [expr {($m1<$m2) ? $m1 : $m2}]
            if {$min > $max} {set max $min}
        }
        lappend red [expr {($max < 100) ? $max : 100}]
    }
    
    if {[lindex $red end] == 100} {
        while {[lindex $red end] == 100} {
            set red [lrange $red 0 end-1]
        }
        lappend red full
    }

    list $ext $red
}

proc steenrod::algebra::ptslist {algebra nalg} {
    set res {}
    for {set i 0} {$i <= $nalg} {incr i} {
        for {set j 0} {$j<$i} {incr j} {
            set aux [expr {$i-$j-1}]
            if {[exponent $algebra $j] > $aux} {
                lappend res [list P [expr {$j+1}] $aux]
            }
        }
        set aux [expr {1<<$i}]
        if {0 != ($aux & [lindex $algebra 0])} { 
            lappend res [list Q $i]
        }
    }
    return $res
}

proc steenrod::algebra::ContainsPts {algebra pts} {
    switch -- [lindex $pts 0] {
        P {
            foreach {x i j} $pts break
            return [expr {([exponent $algebra [expr {$i-1}]] > $j) ? 1 : 0}]
        }
        Q {
            return [expr {[lindex $algebra 0] & (1 << [lindex $pts 1])}]
        }
    }
    error "$pts not understood"
}

proc steenrod::algebra::ReducedCoproduct {pts} {
    set res {}
    switch -- [lindex $pts 0] {
        P {
            foreach {x t s} $pts break
            for {set i 1} {$i<$t} {incr i} {
                lappend res [list P [expr {$t-$i}] [expr {$s+$i}]]
                lappend res [list P $i $s]
            }
            return $res
        }
        Q {
            foreach {x n} $pts break
            for {set i 0} {$i<$n} {incr i} {
                lappend res [list P [expr {$n-$i}] $i]
                lappend res [list Q $i]
            }
            return $res
        }
    }
    error "$pts not understood"
}

proc steenrod::algebra::compinfo {algebra nalg} {
    set res {}
    set ptslist [ptslist $algebra $nalg]
    lappend res ptslist $ptslist
    set generators {}
    set redcops {}
    foreach pts $ptslist {
        set isgen true
        set rcps {}
        foreach {1st 2nd} [ReducedCoproduct $pts] {
            if {[ContainsPts $algebra $1st] && [ContainsPts $algebra $2nd]} {
                set isgen false
                lappend rcps $1st $2nd
            } 
        }
        if {$isgen} {
            lappend generators $pts
        } else {
            lappend redcops $pts $rcps
        }
    }
    lappend res generators $generators redcops $redcops
    return $res
}

proc steenrod::algebra::generators {algebra nalg} {
    array set stuff [compinfo $algebra $nalg]
    return $stuff(generators)
}

proc steenrod::algebra::Logp {prime num} {
    set res 0
    foreach pow [steenrod::prime $prime powers] {
        if {$pow > $num} {return $res}
        incr res
    }
    return 100
}

proc steenrod::algebra::envelope {prime element} {
    set x [list]
    foreach itm [lindex $element 2] {
        lappend x [Logp $prime $itm]
    }
    lset element 2 $x
    return [lrange $element 1 2]
}

proc steenrod::algebra::pts2op {prime pts} {   
    switch -- [lindex $pts 0] {
        P {
            foreach {x i j} $pts break
            set exp [lindex [steenrod::prime $prime powers] $j]
            set red [string repeat "0 " [expr {$i-1}]]
            lappend red $exp
            return [list 1 0 $red 0]
        }
        Q {
            return [list 1 [expr {1 << [lindex $pts 1]}] {} 0]
        }
    }
    error "$pts not understood"
}

proc steenrod::algebra::tomono {alg {N {}}} {
    set res 0
    if {$N eq ""} {set N [steenrod::prime 2 NALG]}
    lappend res [expr {[lindex $alg 0] & (((2<<($N+1))>>1)-1)}]
    set M $N
    set red [list]
    for {set i 0} {$i<$N} {incr i} {
        set aux [exponent $alg $i]
        if {$aux > $M} {set aux $M}
        incr M -1
        lappend red $aux
    }
    lappend res $red 0
    set res
}
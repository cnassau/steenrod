# -*- tcl -*-
#
# This file provides a test suite for the enumerator functions
#
# Copyright (C) 2004 Christian Nassau <nassau@nullhomotopie.de>
#
#  $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

if {[file exists pkgIndex.tcl]} {
    set dir [pwd]
    source pkgIndex.tcl
    set auto_path something_useless
}
package require Steenrod 

namespace import -force steenrod::*

# --------------------------------------------------------------------------

proc rint max { expr {int(rand()*($max))} }

proc rmat base {
    set nrow [rint 53]
    set ncol [rint 53]
    set mat {}
    for {set i 0} {$i<$nrow} {incr i} {
        set row {}
        for {set j 0} {$j<$ncol} {incr j} {
            lappend row [rint $base]
        }
        lappend mat $row
    }
    return $mat
}

proc mputs val {
    #puts $val
}

proc do-test {base mat} {
mputs -----------------
mputs "do-test $base $mat"
    set enc [matrix encode $base $mat]
mputs $enc
    set dec [matrix decode $enc]
mputs $dec
    matrix addto dec $mat -1
mputs $dec
    matrix iszero $dec
}

# carry out the tests 
for {set base 2} {$base < 45} {incr base} {
    set cnt 0
    set isbig [expr {$base>5}]
    set skiptest [expr {$isbig && ![testConstraint BIGTEST]}]
    while {[incr cnt] < 130} {
        if {!$skiptest} {
            set mat [rmat $base]
        }
        test matenc-$base-$cnt {} [expr {$isbig ? "BIGTEST" : ""}] \
            [list do-test $base $mat] 1
    }
}



# some previously problematic cases: 

do-test 2 {{1 0 0} {0 0 0} {1 1 0} {1 1 1} {0 1 0}}
do-test 4 {{1 2 2} {3 0 1} {2 2 0} {3 3 1}}
do-test 8 {{1 5 5} {7 0 7} {2 2 7} {7 6 0}}
do-test 14 {{0 1 13 6 13} {4 5 4 4 4} {13 0 6 8 2} {11 0 7 8 3}}
do-test 15 {{10 5} {0 9} {7 8} {14 2}}
do-test 13 {{10 0 2 5 3 2 4} {8 2 5 12 7 8 8} {2 10 9 0 1 9 10} {5 8 3 6 2 9 1}}
do-test 35 {{33 29 24 4 2 28} {19 4 12 33 30 9} {17 11 19 10 0 31} {19 5 19 15 23 23}}
do-test 12 {0 1 2 2 8 9 2 3 3 6 6 11}


# tests for the binary encoding fo polynomials

proc 2hex {s} {
    set x {}
    foreach char [split $s ""] {
        lappend x [format %02x [scan $char %c]]
    }
    join $x :
}

proc hex2 {s} {
    set res ""
    foreach val [split [string trim $s] :] {
        append res [binary format c 0x$val]
    }
    return $res
}

set u ""
for {set i 0} {$i<256} {incr i} {
    append u [binary format c $i]
}

test hex2-consistency 1 {
    2hex $::u
} 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:14:15:16:17:18:19:1a:1b:1c:1d:1e:1f:20:21:22:23:24:25:26:27:28:29:2a:2b:2c:2d:2e:2f:30:31:32:33:34:35:36:37:38:39:3a:3b:3c:3d:3e:3f:40:41:42:43:44:45:46:47:48:49:4a:4b:4c:4d:4e:4f:50:51:52:53:54:55:56:57:58:59:5a:5b:5c:5d:5e:5f:60:61:62:63:64:65:66:67:68:69:6a:6b:6c:6d:6e:6f:70:71:72:73:74:75:76:77:78:79:7a:7b:7c:7d:7e:7f:80:81:82:83:84:85:86:87:88:89:8a:8b:8c:8d:8e:8f:90:91:92:93:94:95:96:97:98:99:9a:9b:9c:9d:9e:9f:a0:a1:a2:a3:a4:a5:a6:a7:a8:a9:aa:ab:ac:ad:ae:af:b0:b1:b2:b3:b4:b5:b6:b7:b8:b9:ba:bb:bc:bd:be:bf:c0:c1:c2:c3:c4:c5:c6:c7:c8:c9:ca:cb:cc:cd:ce:cf:d0:d1:d2:d3:d4:d5:d6:d7:d8:d9:da:db:dc:dd:de:df:e0:e1:e2:e3:e4:e5:e6:e7:e8:e9:ea:eb:ec:ed:ee:ef:f0:f1:f2:f3:f4:f5:f6:f7:f8:f9:fa:fb:fc:fd:fe:ff

test hex2-consistency 2 {
    hex2 [2hex $::u]
} $u

proc polymatch {a b} {
    expr {[poly compare $a $b] ? 0 : 1}
}
customMatch poly polymatch

foreach {p res} {
    {{0 0 {} 0}} {00:00:00:00}
    {{17 3 4 11}} {11:0b:03:01:04}
    {{3 -1 {0 1} 7654}} {03:e6:3b:7f:02:00:01}
    {{1 6 {0 1 45872 12645 0 3} 7654}} {01:e6:3b:06:06:00:01:b0:e6:7e:e5:e2:00:00:03}
    {{1 2 3 4}                              } {01:04:02:01:03                                             }
    {{1 2 3 4} {2 3 4 1}                    } {01:04:02:01:03:02:01:03:01:04                              }
    {{1 2 3 4} {2 3 4 1} {3 4 1 2}          } {01:04:02:01:03:02:01:03:01:04:03:02:04:01:01               }
    {{1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}} {01:04:02:01:03:02:01:03:01:04:03:02:04:01:01:04:03:01:01:02}
} {
    test bin_enc 1.[incr ::becnt] "2hex \[[list steenrod::binfmt encode $p]\]" [string trim $res]
    test bin_dec 1.[incr ::bdcnt] -body "steenrod::binfmt decode \[[list hex2 $res]\]" -result $p -match poly
}

# 7bit encoding tests

proc intlist {a b} {
    if {[llength $a] != [llength $b]} {
	return false
    }
    foreach x $a y $b {
	if {$x != $y} {
	    return false
	}
    }
    return true
}
customMatch intlist intlist

set testlists {
    {}
    {1 2 3}
    {1 -1 2 -3 4}
    {1 2 4 8 16 32 64}
    {1 2 4 8 16 32 64 128}
    {-1 -3 -7 -15 -31 -63}
    {-1 -3 -7 -15 -31 -63 -127}
    {1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288}
    {0 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287}
    {-1 -3 -7 -15 -31 -63 -127 -255 -511 -1023 -2047 -4095 -8191 -16383 -32767 -65535 
	-131071 -262143 -524287}
}

proc range {min max} {
    for {set i $min} {$i<=$max} {incr i} {
	lappend res $i
    }
    return $res
}

foreach {min max} {
    -10 10
    -2 500
    -500 2
    -2753727 -2753563
    1271711812 1271712112 
} {
    lappend testlists [range $min $max]
}

proc randlist {} {
    set res {}
    while {rand()<0.95} {
	lappend res [expr {int(rand()*0xfffffffff)-0x7fffffffff}]
    }
    return $res
}

for {set i 0} {$i<50} {incr i} {
    lappend testlists [randlist]
}

foreach lst $testlists {
    test "7bit-encoding" "test [incr ::sbcnt]" -body [string map [list LST $lst] {
	set lst {
	    LST
	}
	steenrod::7bit decode [steenrod::7bit encode $lst]
    }] -match intlist -result $lst
    test "7bit-encoding" "test [incr ::sbcnt]" -body [string map [list LST $lst] {
	set lst {
	    LST
	}
	set enco1 [steenrod::7bit encode $lst]
	set enco2 [steenrod::7bit encode [steenrod::7bit decode $enco1]]
	string compare $enco1 $enco2
    }] -result 0
}



# --------------------------------------------------------------------------

# cleanup
::tcltest::cleanupTests
return


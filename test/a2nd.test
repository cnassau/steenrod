# -*- tcl -*-
#
# This file provides a test suite for the secondary Steenrod algebra
#
# Copyright (C) 2011 Christian Nassau <nassau@nullhomotopie.de>
#
#  $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

if {[file exists pkgIndex.tcl]} {
    set dir [pwd]
    source pkgIndex.tcl
    set auto_path something_useless
}

package require Steenrod 

source src/a2nd.tc
namespace import -force steenrod::*


# --------------------------------------------------------------------------

interp alias {} Parse {} ::steenrod::A2nd::Parse

test a2nd-1 {basis enumeration} {
   set res {}
   foreach deg {-2 -1 0 1 2 3 10 15 20} {
      set line "[format %3d $deg]: "
      foreach mod {A D0 D1 E0 E1 RD RE iA} {
	append line " " [format %3d [llength [A2nd basis $mod $deg]]]
      }
      lappend res $line
   }
   join $res \n
} [string trim "
 -2:    0   0   0   0   0   0   0   0
 -1:    0   0   1   0   1   0   0   0
  0:    1   1   2   1   2   1   1   1
  1:    1   1   3   1   4   1   1   1
  2:    1   2   4   3   6   2   3   1
  3:    2   3   6   5  10   3   5   2
 10:    6  17  28  45  65  17  45   6
 15:   11  40  56 112 140  40 112  11
 20:   17  78 104 234 280  78 234  17
" \n]

test a2nd-2 {printing} { 
   set res {}
   foreach {itm exp} {
      {{} {}} 0
      {{} {{1 0 0 0}}} 1
      {{} {{1 0 1 0}}} Sq(1)
      {{} {{2 0 1 0}}} {2 Sq(1)}
      {{} {{3 0 {0 2} 0} {1 0 1 0}}} {3 Sq(0,2) + Sq(1)}
      {X-1,3 {{1 0 {0 1} 0}}} {X-1,3 Sq(0,1)} 
      {X-1,3 {}} 0 
      {X-1,3 {} M1,2 {{1 0 3 0}}} {M1,2 Sq(3)} 
      {U1,2 {{1 0 {3} 0} {1 0 {2 1} 0}}} {U1,2 (Sq(3) + Sq(2,1))} 
   } {
      set pr [A2nd print $itm]
      set pr2 [string map {{ } {}} $pr]
      set exp2 [string map {{ } {}} $exp]
      if {$pr2 ne $exp2} {
         lappend res "$itm: got >$pr<, expected >$exp<" 
      }
   }
   join $res \n
} {}

test a2nd-3 {comparison} {
   set res {}
   set smpl {}
   lappend smpl {{} {}}
   lappend smpl {{} {{1 0 0 0}}}
   lappend smpl {{} {{2 0 0 0}}}
   lappend smpl {{} {{1 0 1 0}}}
   lappend smpl {{X1,2} {{1 0 0 0}}}
   lappend smpl {{iota} {{1 0 0 0}}}
   lappend smpl {{X1,2} {{1 0 1 0}}}
   lappend smpl {{M1,2} {{1 0 0 0}}}
   foreach a $smpl {
   	set a2 [list {*}$a {} {}] ;# a2 = a + 0
        if {[A2nd compare $a $a2]} {
	   lappend res "a!=a+0 for a=>$a<"
	}
	if {[A2nd compare $a $a]} {
	   lappend res "a!=a for a=>$a<"
	}
	foreach b $smpl {
           if {$a eq $b} continue
	   if {![A2nd compare $a $b]} {
              lappend res "a=b for a=>$a<, b=>$b<"
	   }
	}
   }
   join $res \n
} {}

test a2nd-4 {map to A} {
   set res {}
   foreach {in exp} {
      {} {}
      {X1,2 {}} {}
      {X1,2 {{1 0 1 0}}} {}
      {{} {}} {}
      {{} {{1 0 1 0}}} {{1 0 1 0}}
      {{} {{3 0 1 0}}} {{1 0 1 0}}
      {{} {{2 0 1 0}}} {}
   } {
      set pi [A2nd pi $in]
      if {[poly compare $pi $exp]} {
         lappend res "got >$pi<, expected >$exp<"
      }
   }
   join $res \n
} {}


test a2nd-5 {component extraction} {
   set res {}
   set avals {
      {{3 0 1 0}} 
      {{1 0 2 0}} 
      {{1 0 3 0}} 
      {{1 0 4 0}} 
      {{1 0 5 0}} 
      {{1 0 6 0}} 
   }
   set prefs {
      {} iota mu0 X1,2 U-1,2 M1,2 
   }
   set val {}
   foreach p $prefs a $avals {
      lappend val $p $a
   }
   lappend avals {}
   lappend prefs X3,4
   foreach p $prefs a $avals {
      set c [A2nd component $p $val]
      if {[poly compare $c $a]} {
          lappend res "component($p): got >$c<, expected >$a<"
      }
   }

   join $res \n
} {}

test a2nd-6 {sigma} {
   A2nd sigma {{1 0 {0 2} 0}}
} {{} {{1 0 {0 2} 0}}}

test a2nd-7 {multiplication} {
   set res {}
   foreach {a b prod} {
     {{} Sq(1)} {{} Sq(1)} {{} 2Sq(2) Y-1,0 Sq(0) M0,0 Sq(0) X-1,0 Sq(0)}
     {{} Sq(0)} {{} 3Sq(1)} {{} 3Sq(1)}
     {{} Sq(4)} {{} Sq(0)} {{} Sq(4)}
     {{} Sq(1)} {Y-1,0 Sq(0)} {Y-1,0 Sq(1) {} 2Sq(0,1)}
     {{} Sq(1)} {Y-1,1 Sq(0)} {Y-1,1 Sq(1) Y0,1 Sq(0)}
     {{} Sq(1)} {X0,0 Sq(0)}  {X0,0 Sq(1)}
     {{} Sq(2)} {X0,0 Sq(0)}  {X0,0 Sq(2) X0,1 Sq(0) X1,0 Sq(0)}
     {{} Sq(2)} {Y-1,0 Sq(0)} {Y-1,0 Sq(2) {} 2Sq(1,1) Y-1,1 Sq(0)}
     {{} Sq(0,2)} {{} Sq(0,2)} {{} 2Sq(0,4) Y0,2 Sq(0,1)}
     {{} Sq(8)} {mu0 Sq(0)} {mu0 Sq(8) iota Sq(7)}
     {{} Sq(1)} {mu0 Sq(4)} {mu0 Sq(5) iota Sq(4)}
     {{} Sq(1)} {U-1,0 Sq(0)} {U-1,0 Sq(1) mu0 Sq(0,1) iota Sq(2)}
   } {
      set a1 [Parse $a]
      set b1 [Parse $b]
      set pr [Parse $prod]
      set prod [A2nd product $a1 $b1]
      if {[A2nd compare $prod $pr]} {
         #lappend res ">$prod< >$pr<"
         lappend res "([A2nd print $a1]) * ([A2nd print $b1]) != [A2nd print $pr], got [A2nd print $prod]"
      }
   }
   join $res \n
} {}

proc ::SqD {idx1 idx2} {
    # return Sq(Delta_idx1 + Delta_idx2)
    set red {0 0 0 0 0 0 0 0 0 0}
    if {$idx1>=0} {lset red $idx1 [expr {1+[lindex $red $idx1]}]}
    if {$idx2>=0} {lset red $idx2 [expr {1+[lindex $red $idx2]}]}
    while {[lindex $red end]==0} {
        set red [lrange $red 0 end-1]
    }
    if {$red eq ""} {set red 0}
    return "Sq([join $red ,])"
}

test a2nd-8 {U-relations} {
    set res {}
    foreach i {0 1 2 3 4} {
       for {set j $i} {$j<=7} {incr j} {
          set uij [Parse "U$i,$j Sq(0)"]
          set uji [Parse "U$j,$i Sq(0)"]
	  set uji [A2nd product [A2nd one] $uji]
	  if {$i==$j} {
              set want "mu0 [SqD [expr {$i+1}] -1] iota [SqD [expr {$i+0}] [expr {$i+0}]]"
	  } else {
              set want "U$i,$j Sq(0) iota [SqD $i $j]"
	  }
	  set wp [Parse $want]
	  #puts "U$j,$i = [A2nd print $wp]"
	  if {[A2nd compare $wp $uji]} {
              lappend res "U$j,$i != $want: got [A2nd print $uji]"
	  }
       }
    }
    join $res \n
} {}


test a2nd-9 {} {} {}
test a2nd-10 {} {} {}
test a2nd-11 {} {} {}
test a2nd-12 {} {} {}
test a2nd-13 {} {} {}
test a2nd-14 {} {} {}
test a2nd-15 {} {} {}
test a2nd-16 {} {} {}
test a2nd-17 {} {} {}

# --------------------------------------------------------------------------

# cleanup
::tcltest::cleanupTests
return


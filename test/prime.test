# -*- tcl -*-
#
# This file provides a test suite for the basic prime stuff
#
# Copyright (C) 2004 Christian Nassau <nassau@nullhomotopie.de>
#
#  $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

lappend auto_path ../lib
package require Steenrod 0.75

namespace import -force steenrod::*

# --------------------------------------------------------------------------

# all primes under 63 (which is too large for us)
set primes {2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61}

test prime-1.0 {prime recognition} {
    set res {}
    for {set p -50} {$p<63} {incr p} {
        set aux [catch {prime $p inverse 1}]
        if {[lsearch $primes $p]<0} {
            if {!$aux} { lappend res $p+ }
        } else {
            if {$aux} { lappend res $p- }
        }
    }
    set res
} {}


test prime-1.1 {prime inverses} {
    set res {}
    foreach p $primes {
        for {set i 1} {$i<$p} {incr i} {
            set aux [expr ($i * [prime $p inverse $i]) % $p]
            if {$aux != 1} { lappend res $p/$i }
        }
    }
    set res
} {}

test prime-1.2 {prime tpmo} {
    set res {}
    foreach p $primes {
        if {[prime $p tpmo] != [expr 2 * ($p - 1)]} { lappend res $p }
    }
    set res
} {}

test prime-1.3 {prime powers} {
    set res {}
    foreach p $primes {
        set pows [prime $p powers]
        set max  [prime $p maxpow]
        if {$max<2} { lappend res "maxpow-too-small-$p" }
        for {set i 0} {$i<$max} {incr i} {
            if {[expr ($p * [lindex $pows $i])] != [lindex $pows [expr $i+1]]} {
                lappend res "error-$p-$i"
            }
        }
    }
    set res
} {}


test prime-1.4 {prime degrees} {
    set res {}
    foreach p $primes {
        set pows [prime $p powers]
        set edegs [prime $p edegrees]
        set rdegs [prime $p rdegrees]
        set tpmo [prime $p tpmo]
        set max  [prime $p maxpow]
        for {set i 0} {$i<$max} {incr i} {
            if {[lindex $edegs $i] != [expr 2*[lindex $pows $i] - 1]} {
                lappend res "mismatch-$p-$i-E"
            }
            set a [expr $tpmo * [lindex $rdegs $i]]
            set b [expr 2*([lindex $pows [expr $i+1]] - 1)]
            if {$a != $b } {
                lappend res "mismatch-$p-$i-R"
            }
        }
    }
    set res
} {}


test prime-1.5 {prime binom} {
    set res {}
    foreach p $primes {
        foreach k {0 1 2 3 4 5 6 7 8 9 10 11 12 13} {
            # check whether binom(k over i) sums to 2^i mod p
            set sum 0
            for {set i [expr $k+10]} {$i>-6} {incr i -1} {
                incr sum [prime $p binom $k $i]
            }
            if {[expr ($sum - (1 << $k)) % $p] != 0} {
                lappend res "error-$p-$k"
            }
        }
    }
    set res
} {}

test prime-1.6 {list of primes available} {
    expr {[llength $steenrod::primes] > 5 ? "ok" : "not enough primes"}
} ok

proc tcl::mathfunc::binom {n m} {
    variable bins
    if {![info exists bins($n,$m)]} {
	set bins($n,$m) [binom.impl $n $m]
    }
    return $bins($n,$m) 
}

proc tcl::mathfunc::binom.impl {n m} {
    if {0 == $m} {
	return 1
    }
    if {0 == $n} {
	return 0
    }
    expr {binom($n-1,$m) + binom($n-1,$m-1)}
}

proc decomp {p n} {
    set res {}
    while {$n} {
	lappend res [expr {$n % $p}]
	set n [expr {$n/$p}]
    }
    return $res
}

proc collisions {p n1 n2} {
    set c 0
    set cols {}
    foreach a [decomp $p $n1] b [decomp $p $n2] {
	if {$a ne "" && $b ne ""} {
	    if {$a+$b>=$p} {
		lappend cols $c
	    }
	}
	incr c
    }
    return $cols
}

test prime-1.7 {binomials mod p^2} {
    set errors {}
    set max 30
    for {set n 0} {$n<$max && [llength $errors] < 10} {incr n} {
	for {set m 0} {$m<=$max && [llength $errors] < 10} {incr m} {
	    set bin [expr {binom($n,$m)}]
	    foreach p {2 3 5 7 11} {
		set binp2 [expr {$bin % ($p*$p)}]
		foreach {b c} [prime $p binom2 $n $m] break
		if {$b != $binp2} {
		    lappend errors "binom($n,$m) mod $p*$p: got $b, want $binp2"
		}
		if {$b && 0 == ($b % $p)} {
		    set cols [collisions $p $m [expr {$n-$m}]]
		    if {$c != $cols} {
			lappend errors "collision($n,$m) mod $p*$p: got $c, want $cols"
		    }
		} elseif {$b % $p} {
		    if {$c != -1} {
			lappend errors "collision($n,$m) mod $p*$p: no collision, expected -1, got $c"
		    }
		}
	    }
	}
    }
    join $errors \n
} {}


# --------------------------------------------------------------------------

# cleanup
::tcltest::cleanupTests
return

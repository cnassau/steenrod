# -*- tcl -*-
#
# This file provides a test suite for the enumerator functions
#
# Copyright (C) 2004-2021 Christian Nassau <nassau@nullhomotopie.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

if {[file exists pkgIndex.tcl]} {
    set dir [pwd]
    source pkgIndex.tcl
    set auto_path something_useless
}
package require Steenrod

namespace import -force steenrod::*

# --------------------------------------------------------------------------

# most regression tests use the same enumerator and the same result variable
enumerator ENU
set RES {}

set XXX 0     ;# if 1 we create new test data
set NTD   {}  ;# holds new test data

proc do-test {name} {
    global RES NTD XXX enumtestdata
    set cmdlist $enumtestdata($name)
    set RES [set NDATA {}]
    # create fresh enumerator for this test
    rename ::ENU ""
    enumerator ::ENU
    # carry out commands
    foreach cmd $cmdlist {
        switch -- [lindex $cmd 0] {
            clear {
                if {$XXX} { lappend NDATA "  { clear }\n" }
                rename ::ENU ""
                enumerator ::ENU
            }
            sigcheck {
                set expct [lindex $cmd 1]
                # save signature
                set sig [::ENU cget -signature]
                set signum [llength [set siglist [::ENU siglist]]]
                if {$XXX} {
                    lset cmd 1 $signum
                    append NDATA "  { sigcheck $signum }\n"
                }
                if {$expct != $signum} { lappend RES [list [::ENU conf] sigfail-1] }
                ::ENU sigreset
                set cnt 1
                while {[::ENU signext]} {
                    incr cnt
                }
                if {$cnt != $signum} {
                    lappend RES [list [::ENU conf] sigfail-$cnt-vs-$signum]
                }
                # restore signature
                ::ENU configure -signature $sig
            }
            dimtest {
                set dlst [lindex $cmd 1]
                set aux {}
                set fail {}
                # save internal degree
                set idg [::ENU cget -ideg]
                foreach {i d} $dlst {
                    ::ENU configure -ideg $i
                    set val [::ENU dimension]
                    if {$val != $d} {
                         lappend fail $i
                    }
                    lappend aux $i $val
                }
                if {$XXX} { append NDATA "  { dimtest \{$aux\} }\n" }
                if {[llength $fail]} { lappend RES [list [::ENU conf] dimtest $fail] }
                # restore internal degree
                ::ENU configure -ideg $idg
            }
            seqtest {
                set dm [lindex $cmd 1]
                if {$XXX} { append NDATA "  { [list seqtest $dm] }\n" }
                # save internal degree
                set idg [::ENU cget -ideg]
                ::ENU conf -ideg $dm
                set bas [::ENU basis]
                set cnt 0
                set fail {}
                foreach mo $bas {
                    set sqn [::ENU seqno $mo]
                    if {$sqn != $cnt} { set fail x }
                    incr cnt
                }
                if {[string length $fail]} { lappend RES [list [::ENU conf] seqtest $dm] }
                # restore internal degree
                ::ENU configure -ideg $idg
            }
            default {
                if {$XXX} { append NDATA "  {$cmd}\n" }
                # command is configuration directive
                eval [concat ::ENU configure $cmd]
            }
        }
    }
    append NTD "set enumtestdata($name) {\n$NDATA}\n\n"
    set RES
}

# --------------------------------------------------------------------------

array set enumtestdata {}

# load data from previous runs for comparison
source [file join [file dirname [info script]] enum.data]

# --------------------------------------------------------------------------

# carry out the tests

foreach name [lsort [array names enumtestdata]] {
    test enum-$name {} BIGTEST [list do-test $name] {}
}

if {$XXX} {
    set ch [open enum.data w]
    puts $ch "# -*- tcl -*-"
    puts $ch "#"
    puts $ch [format "#  \$%s\$" Id]
    puts $ch "#"
    puts $ch "# Note: this file will be re-written from the enum test suite."
    puts $ch ""
    puts $ch $NTD
    close $ch
    puts "Wrote new test data to 'enum.data'."
}

# --------------------------------------------------------------------------



test enum-1.1 {enum, min & max} {
    set res {}
    enumerator x -prime 2 -genlist {{1 2 3 4} {-2 -3 -4 -5}}
    lappend res [x min ideg]
    lappend res [x min edeg]
    lappend res [x min hdeg]
    lappend res [x min gen]
    lappend res [x max ideg]
    lappend res [x max edeg]
    lappend res [x max hdeg]
    lappend res [x max gen]
    rename x ""
    set res
} {-3 -4 -5 -2 2 3 4 1}




test enum-1.2 {enum, duplicate generators} {
    set res {}
    enumerator x -prime 2 -genlist {1 1}
    lappend res [catch {x max ideg}]
    rename x ""
    set res
} {1}


test enum-1.3 {enum, double test segfault I} {
    set res {}
    enumerator x -prime 2 -genlist {1 1}
    x conf -genl {0 0 0 0}
    x test
    x test
    rename x ""
    set res
} {}

test enum-1.4 {infinite loop problem} {
    enumerator x -prime 2 -algebra {1 0 {3 2 1} 0} -profile {0 0 {2 1} 0} \
        -genlist {0} -ideg 1000
    x sigreset
    set cnt 0
    while {[x signext] && ([incr cnt]<100)} {}
    # not sure about what to expect precisely here,
    # but result must be smaller than dimension
    # of the profile
    expr {($cnt < 8) ? "sane" : "weird"}
} {sane}

test enum-1.5 {motivic seqno} {
    set res {}
    enumerator mot -prime 2 -algebra {1 0 {3 2 1} 0} -genlist {{0 0 0 0}} -ideg 8
    enumerator reg -prime 2 -algebra {1 7 {2 1} 0} -genlist {{0 0 0 0}} -ideg 4 -edeg 2
    lappend res [mot basis]
    lappend res [reg basis]
    lappend res [mot motseqno reg]
} {{{1 0 {1 1} 0} {1 0 4 0}} {{1 3 {} 0}} 0}

test enum-1.6 {this was broken once} {
    set res {}
    foreach deg {1 2 4 8 16 32 64 128 256 512} {
        enumerator e -prime 2 -algebra {0 0 {10 9 8 7 6 5 4 3} 0} -ideg $deg -edeg 0 -genlist {{0 0 0}}
        lappend res [lindex [e basis] end]
    }
    set res
} {{} {1 0 1 0} {1 0 2 0} {1 0 4 0} {1 0 8 0} {1 0 16 0} {1 0 32 0} {1 0 64 0} {1 0 128 0} {1 0 256 0}}

# tests with extended profiles

proc profile-decomposition-test {prime algebra profile ideg {edeg 0}} {
    enumerator e -prime $prime -algebra $algebra -genlist {{0 0 0 0}} -ideg $ideg -edeg $edeg
    set total [e dimension]
    e configure -profile $profile
    set pieces {}
    set sum 0
    e sigreset
    while on {
        incr sum [set ed [e dimension]]
        if {$ed} {
            lappend pieces $ed
        }
        if {![e signext]} break
    }
    if {$total != $sum} {
        error "mismatch $total != $sum"
    }
    return $pieces
}

test profile-decomposition-5 {test signature decomposition} -body {
   profile-decomposition-test 2 {0 0 {9 9 9 9 9 9 9 9} 0} {0 0 {3 3 2 1} 0} 80
} -result {2 1 1 1 1 2 1 1 2 1 1 1 1 1 1 2 1 2 2 1 1 2 1 1 1 1 1 2 2 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1}



# --------------------------------------------------------------------------

# cleanup
::tcltest::cleanupTests
return

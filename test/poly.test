# -*- tcl -*-
#
# This file provides a test suite for the polynomial routines
#
# Copyright (C) 2004 Christian Nassau <nassau@nullhomotopie.de>
#
#  $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

lappend auto_path ../lib
package require Steenrod 0.75

namespace import -force steenrod::*

# --------------------------------------------------------------------------

proc ismono m {
    return [expr 0 == [string length [mono test $m]]]
}

test mono-1.0 {mono recognition} {
    set res {}
    lappend res [ismono {}]
    lappend res [ismono {0}]
    lappend res [ismono {0 0}]
    lappend res [ismono {0 0 0}]
    lappend res [ismono {0 0 0 0}]
    lappend res [ismono {0 0 0 0 0}]
    lappend res [ismono {0 0 {} 0}]
    lappend res [ismono {0 -1 {} 0}]
    lappend res [ismono {0 0 {-1} 0}]
    lappend res [ismono {0 0 {0 -1} 0}]
    lappend res [ismono {0 0 {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 0}]
    lappend res [ismono {0 0 {-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1} 0}]
    lappend res [ismono nope]
} {0 0 0 0 1 0 1 1 1 1 0 0 0}

test mono-1.1 {mono length, positive} {
    set res {}
    lappend res [mono length {0 0 {} 0}]
    lappend res [mono length {0 1 {} 0}]
    lappend res [mono length {0 2 {} 0}]
    lappend res [mono length {0 4 {} 0}]
    lappend res [mono length {0 8 {} 0}]
    lappend res [mono length {0 16 {} 0}]
    lappend res [mono length {0 32 {} 0}]
    lappend res [mono length {0 64 {} 0}]
    lappend res [mono length {0 128 {} 0}]
    lappend res [mono length {0 0 {1} 0}]
    lappend res [mono length {0 0 {0 1} 0}]
    lappend res [mono length {0 0 {0 0 1} 0}]
} {0 1 2 3 4 5 6 7 8 1 2 3}

test mono-1.2 {mono length, negative} {
    set res {}
    lappend res [mono length {0 -1 {} 0}]
    lappend res [mono length {0 -2 {} 0}]
    lappend res [mono length {0 -3 {} 0}]
    lappend res [mono length {0 -5 {} 0}]
    lappend res [mono length {0 -1 {-2} 0}]
    lappend res [mono length {0 -1 {-1 0} 0}]
    lappend res [mono length {0 -1 {-1 0 0} 0}]
    lappend res [mono length {0 0 {-1 0} 0}]
    lappend res [mono length {0 0 {-1 1 0} 0}]
} [list 0 1 2 3 1 [prime 2 NALG] [prime 2 NALG] 1 2]

test mono-1.3 {mono rlength, positive} {
    set res {}
    lappend res [mono rlength {0 0 {} 0}]
    lappend res [mono rlength {0 1 {} 0}]
    lappend res [mono rlength {0 2 {} 0}]
    lappend res [mono rlength {0 4 {} 0}]
    lappend res [mono rlength {0 8 {} 0}]
    lappend res [mono rlength {0 16 {} 0}]
    lappend res [mono rlength {0 32 {} 0}]
    lappend res [mono rlength {0 64 {} 0}]
    lappend res [mono rlength {0 128 {} 0}]
    lappend res [mono rlength {0 0 {1} 0}]
    lappend res [mono rlength {0 0 {0 1} 0}]
    lappend res [mono rlength {0 0 {0 0 1} 0}]
} {0 0 0 0 0 0 0 0 0 1 2 3}

test mono-1.4 {mono rlength, negative} {
    set res {}
    lappend res [mono rlength {0 -1 {} 0}]
    lappend res [mono rlength {0 -2 {} 0}]
    lappend res [mono rlength {0 -3 {} 0}]
    lappend res [mono rlength {0 -5 {} 0}]
    lappend res [mono rlength {0 -1 {-2} 0}]
    lappend res [mono rlength {0 -1 {-1 0} 0}]
    lappend res [mono rlength {0 -1 {-1 1 0} 0}]
} {0 0 0 0 1 1 2}

test mono-1.5 {mono padding} {
    set res {}
    # it should always be the last given exponent that decides on the padding
    lappend res [mono padding {0 0 {} 0}]
    lappend res [mono padding {0 -1 {} 0}]
    lappend res [mono padding {0 -1 {-1} 0}]
    lappend res [mono padding {0 0 {-1} 0}]
    lappend res [mono padding {0 -1 {0} 0}]
    lappend res [mono padding {0 -1 {0 1} 0}]
    lappend res [mono padding {0 -1 {0 -1} 0}]
    lappend res [mono padding {0 0 {-1} 0}]
    lappend res [mono padding {0 0 {-1 0} 0}]
} {0 -1 -1 -1 0 0 -1 -1 0}

test mono-1.6 {mono isabove} {
    set res {}
    set m1 {0 7 {3 1} 0}
    lappend res [mono isabove $m1 $m1]
    lappend res [mono isabove {0 7 {3 0} 0} $m1]
    lappend res [mono isabove {0 7 {2 1} 0} $m1]
    lappend res [mono isabove {0 7 {4 0} 0} $m1]
    lappend res [mono isabove {0 7 {3 2} 0} $m1]
    lappend res [mono isabove {0 3 {3 0} 0} $m1]
    lappend res [mono isabove {0 3 {2 1} 0} $m1]
    lappend res [mono isabove {0 3 {4 0} 0} $m1]
    lappend res [mono isabove {0 3 {3 2} 0} $m1]
    lappend res [mono isabove {0 15 {3 0} 0} $m1]
    lappend res [mono isabove {0 15 {2 1} 0} $m1]
    lappend res [mono isabove {0 15 {4 0} 0} $m1]
    lappend res [mono isabove {0 15 {3 1} 0} $m1]
} {1 0 0 0 1 0 0 0 0 0 0 0 1}

test mono-1.7 {mono isbelow} {
    set res {}
    set m1 {0 7 {3 1} 0}
    lappend res [mono isbelow $m1 $m1]
    lappend res [mono isbelow {0 7 {3 0} 0} $m1]
    lappend res [mono isbelow {0 7 {2 1} 0} $m1]
    lappend res [mono isbelow {0 7 {4 0} 0} $m1]
    lappend res [mono isbelow {0 7 {3 2} 0} $m1]
    lappend res [mono isbelow {0 3 {3 0} 0} $m1]
    lappend res [mono isbelow {0 3 {2 1} 0} $m1]
    lappend res [mono isbelow {0 3 {4 0} 0} $m1]
    lappend res [mono isbelow {0 3 {3 2} 0} $m1]
    lappend res [mono isbelow {0 15 {3 0} 0} $m1]
    lappend res [mono isbelow {0 15 {2 1} 0} $m1]
    lappend res [mono isbelow {0 15 {4 0} 0} $m1]
    lappend res [mono isbelow {0 15 {3 1} 0} $m1]
} {1 1 1 0 0 1 1 0 0 0 0 0 0}

test mono-1.6 {mono isabove, negative} {
    set res {}
    set m1 {0 -8 {-4 -2} 0}
    lappend res [mono isabove $m1 $m1]
    lappend res [mono isabove {0 0 {-1} 0} $m1]
    lappend res [mono isabove {0 -1 {-1} 0} $m1]
    lappend res [mono isabove {0 -1 {-5 -2} 0} $m1]
    lappend res [mono isabove {0 -1 {-4 -3} 0} $m1]
    lappend res [mono isabove {0 -1 {-2 -1} 0} $m1]
    lappend res [mono isabove {0 -8 {-2 5} 0} $m1]
    lappend res [mono isabove {0 -16 {-2} 0} $m1]
    lappend res [mono isabove {0 -12 {-1} 0} $m1]
} {1 0 1 0 0 1 1 0 0}

test mono-1.7 {mono isbelow, negative} {
    set res {}
    set m1 {0 -8 {-4 -2} 0}
    lappend res [mono isbelow $m1 $m1]
    lappend res [mono isbelow {0 0 {-1} 0} $m1]
    lappend res [mono isbelow {0 -1 {-1} 0} $m1]
    lappend res [mono isbelow {0 -1 {-5 -2} 0} $m1]
    lappend res [mono isbelow {0 -1 {-4 -3} 0} $m1]
    lappend res [mono isbelow {0 -1 {-2 -1} 0} $m1]
    lappend res [mono isbelow {0 -8 {-2 5} 0} $m1]
    lappend res [mono isbelow {0 -16 {-2} 0} $m1]
    lappend res [mono isbelow {0 -12 {-1} 0} $m1]
    lappend res [mono isbelow {0 -16 {-5 -2} 0} $m1]
    lappend res [mono isbelow {0 -8 {-4 -2 -2} 0} $m1]
    lappend res [mono isbelow {0 -15 {-4 -2} 0} $m1]
} {1 0 0 0 0 0 0 0 0 1 1 0}

test mono-1.8 {mono gen} {
    set res {}
    foreach m {{0 0 0 0} {0 0 0 -1} {0 0 0 1} {1 2 3 666}} {
	lappend res [mono gen $m]
    }
    set res
} {0 -1 1 666}

test mono-1.9 {mono coeff} {
    set res {}
    foreach m {{1 0 0 0} {0 0 0 0} {-1 0 0 0} {666 1 2 3}} {
	lappend res [mono coeff $m]
    }
    set res
} {1 0 -1 666}

test mono-1.10 {mono exterior} {
    set res {}
    foreach m {{0 1 0 0} {0 0 0 0} {0 -1 0 0} {0 666 1 2}} {
	lappend res [mono exterior $m]
    }
    set res
} {1 0 -1 666}

test mono-1.11 {mono exponent} {
    set res {}
    foreach m {{0 0 {0 0 1} 0} {0 0 {1 2 3} 9} {0 -1 {0 0 1} 3} {0 0 {-1} 5} {0 -1 {-8 -4 -2} 3}} {
	set uhu {}
	foreach i {0 1 2 3 1000} {
	    lappend uhu [mono exponent $m $i]
	}
	lappend res $uhu
    } 
    set res
} {{0 0 1 0 0} {1 2 3 0 0} {0 0 1 0 0} {-1 -1 -1 -1 -1} {-8 -4 -2 -1 -1}}

test mono-1. {mono } {

}

# --------------------------------------------------------------------------

proc ispoly p {
    return [expr 0 == [string length [poly test $p]]]
}

test poly-1.0 {poly recognition} {
    set res {}
    set mon {0 0 0 0}
    lappend res [ispoly {}]
    lappend res [ispoly {0 0 0 0}]
    lappend res [ispoly {{0 0 0 0}}]
    lappend res [ispoly {{0 0 0 0} {0 0 0 0}}]
    lappend res [ispoly {{0 0 0 0} {0 0 0 1}}]
    lappend res [ispoly [list]]
    lappend res [ispoly [list $mon]]
    lappend res [ispoly [list $mon $mon]]
} {1 0 1 1 1 1 1 1}

test poly-1.1 {poly coeff} {
    set res {}
    set pol {}
    foreach x {0 1 2 3 4 5 6 7 8 9} {
        lappend pol [list $x 0 0 $x]
    }
    foreach x {0 1 2 3 4 5 6 7 8 9} {
        lappend res [poly coeff $pol [list 0 0 0 $x]]
    }
    lappend res -1
    set pol {}
    foreach x {0 1 2 3 4 5 6 7 8 9} {
        lappend pol [list $x 0 $x 0]
    }
    foreach x {0 1 2 3 4 5 6 7 8 9} {
        lappend res [poly coeff $pol [list 0 0 $x 0]]
    }
    lappend res -1
    set pol {}
    foreach x {0 1 2 3 4 5 6 7 8 9} {
        lappend pol [list $x 3 0 0]
    }
    foreach x {2 3 4} {
        lappend res [poly coeff $pol [list 0 $x 0 0]]
    }
    set res
} {0 1 2 3 4 5 6 7 8 9 -1 0 1 2 3 4 5 6 7 8 9 -1 0 45 0}


test poly-1.2 {poly reflect} {
    set res {}
    foreach {pol sol} {
        {{1 0 0 2}}          {{1 -1 {} 2}}
        {{1 1 0 2}}          {{1 -2 {} 2}}
        {{1 0 1 2}}          {{1 -1 -2 2}}
        {{1 -3 {-1 -2} 2}}   {{1 2 {0 1} 2}}
        {{1 -3 -11 2}}       {{1 2 10 2}}
        {{1 1 1 1} {2 2 2 2} {-1 -1 -1 -1}} {{1 -2 -2 1} {2 -3 -3 2} {-1 0 {} -1}}
    } {
        lappend res [poly compare $sol [poly reflect $pol]]
        lappend res [poly compare $pol [poly reflect [poly reflect $pol]]] 
    }
    set res 
} {0 0 0 0 0 0 0 0 0 0 0 0}


test poly-1.3 {poly shift} {
    set res {}
    foreach itm {
        {{{1 1 0 0}} {2 0 0 0} 0 {{1 1 {} 0}}} 
        {{{1 1 0 0}} {2 0 0 0} 1 {{1 1 {} 0}}} 
        {{{1 1 0 0}} {0 2 0 0} 0 {{1 3 {} 0}}} 
        {{{1 1 0 0}} {0 2 0 0} 1 {{1 3 {} 0}}} 
        {{{1 2 0 0}} {0 2 0 0} 0 {{1 0 {} 0}}} 
        {{{1 2 0 0}} {0 1 0 0} 0 {{1 3 {} 0}}} 
        {{{1 2 0 0}} {0 1 0 0} 1 {{-1 3 {} 0}}} 
        {{{1 0 0 0} {1 3 0 1} {1 0 5 2}} {7 0 {0 2} 2} 1 
            {{1 0 {0 2} 0} {1 3 {0 2} 1} {1 0 {5 2} 2}}}
    } {
        foreach {pol mon flag sol} $itm break
        set aux [poly shift $pol $mon $flag]
        if {[poly compare $aux $sol]} {
            lappend res [list $pol $mon $flag $aux]
        } else {
            lappend res ok
        }
    }
    set res
} {ok ok ok ok ok ok ok ok}


test poly-1.4 {poly shift, negative} {
    set res {}
    foreach itm {
        {{{1 -1 -1 0}} {2 0 0 0} 0 {{1 -1 {} 0}}} 
        {{{1 -1 -1 0}} {2 0 0 0} 1 {{1 -1 {} 0}}} 
        {{{1 -1 -1 0}} {0 2 0 0} 0 {{1 -3 {} 0}}} 
        {{{1 -2 -1 0}} {0 2 0 0} 0 {{1 -4 {} 0}}} 
        {{{1 -2 -1 0}} {0 1 0 0} 0 {{1 -1 {} 0}}} 
        {{{1 -2 -1 0}} {0 1 0 0} 1 {{-1 -1 {} 0}}}

        {{{1 -2 -1 0}} {0 2 0 0} 1 {{0 -4 {} 0}}} 
        {{{1 -2 -1 0}} {0 1 0 0} 1 {{-1 -1 {} 0}}} 
        {{{1 -2 -1 0}} {0 1 0 0} 0 {{1 -1 {} 0}}}
    } {
        foreach {pol mon flag sol} $itm break
        set aux [poly shift $pol $mon $flag]
        if {[poly compare $aux $sol]} {
            lappend res [list $pol $mon $flag $aux]
        } else {
            lappend res ok
        }
    }
    set res
} {ok ok ok ok ok ok ok ok ok}


test poly-1.5 {poly append} {
    set res {}
    set pol1 [set pol2 [set pol3 {}]]
    foreach x {1 2 3 4} {
        set aux [list [list 1 0 0 $x]]
        set pol1 [poly append $pol1 $aux]
        poly varappend pol2 $aux
        lappend pol3 [lindex $aux 0]
        lappend res [poly compare $pol1 $pol3]
        lappend res [poly compare $pol1 $pol2]
        lappend res [llength $pol1]
        lappend res [poly coeff $pol1 {0 0 0 2}]
        lappend res -
    }
    foreach x {1 2 3 4} {
        set aux [list [list $x 3 0 0]]
        set pol1 [poly append $pol1 $aux]
        poly varappend pol2 $aux
        lappend res [poly compare $pol1 $pol2]
        lappend res [poly coeff $pol1 {6 3 0 0}]
        lappend res -
    }
    set res  
} {0 0 1 0 - 0 0 2 1 - 0 0 3 1 - 0 0 4 1 - 0 1 - 0 3 - 0 6 - 0 10 -}


test poly-1.6 {poly compare} {
    set res {}
    foreach {a b} {
        {} {}
        {} {{1 0 0 0}} 
        {{1 0 0 0}} {} 
        {{1 0 0 0}} {{2 0 0 0}} 
        {{1 0 0 0}} {{1 1 0 0}} 
        {{1 0 0 0}} {{1 0 1 0}} 
        {{1 0 0 0}} {{1 0 0 1}} 
        {{1 0 0 0} {1 0 0 0}} {{1 0 0 0} {2 0 0 0}} 
        {{1 0 0 0} {1 0 0 1}} {{1 0 0 0} {1 0 0 0}} 
    } {
        set aux1 [poly compare $a $b]
        set aux2 [poly compare $b $a]
        if {(($aux1>0) && ($aux2>0)) || (($aux2<0) && ($aux1<0))} {
            lappend res inconsistency!
        } else {
            lappend res .
        }
        if {$aux1} { lappend res != } else { lappend res = }
        lappend res [poly compare $a $a]
    }
    set res
} {. = 0 . != 0 . != 0 . != 0 . != 0 . != 0 . != 0 . != 0 . != 0}


test poly-1.7 {poly add} {
    set res {}
    set pol {}
    foreach {c x} {1 0 1 0 1 3 2 2 2 3 2 0 1 2 0 2} {
        set pol [poly add $pol [list [list $c 0 0 $x]] 2 5]
        foreach y {0 1 2 3} {
            lappend res [poly coeff $pol [list 0 0 0 $y]]
        }
    }
    lappend res [poly add {} {}]
    lappend res [poly add {{0 1 1 1}} {}]
    lappend res [poly add {} {{0 1 1 1}}]
    lappend res [poly add {{0 0 0 0}} {{0 1 1 1}}]
    set pol2 {}
    foreach pol { {{1 0 0 1}} {{4 0 1 3} {2 0 1 3} {1 2 0 0} {3 2 1 0}} {{0 2 0 0}} } {
        lappend res [poly add $pol [poly add $pol2 $pol -1] 1]
    }
    set res
} {2 0 0 0 4 0 0 0 4 0 0 2 4 0 4 2 4 0 4 1 3 0 4 1 3 0 1 1 3 0 1 1 {} {} {} {} {} {} {}}


test poly-1.8 {poly cancel} {
    set res {}
    set pol {}
    foreach {c x} {1 0 1 0 1 3 2 2 2 3 2 0 1 2 0 2} {
        lappend pol [list $c 0 $x 0]
        lappend res [llength [poly cancel $pol 3]]
        set aux $pol ; poly varcancel aux 3
        lappend res [poly compare [poly cancel $pol 3] $aux]
    }
    set pol {}
    foreach {c} {3 2 1 1 3 2} {
        lappend pol [list $c 0 $x 0]
        lappend res [llength [poly cancel $pol 3]]
        set aux $pol ; poly varcancel aux 3
        lappend res [poly compare [poly cancel $pol 3] $aux]
    }
    set res
} {1 0 1 0 2 0 3 0 2 0 2 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0}


test poly-1.9 {poly split} {
    set res [set pol {}]
    foreach x {0 1 2 3 4 5 6} { set $x {} ; lappend pol [list 1 0 0 $x] }
    proc myp1 m { return [lindex $m end] }
    proc myp2 m { set a [lindex $m end] ; if {$a&1} { return -code break } ; return $a }
    proc myp3 m { set a [lindex $m end] ; if {$a&1} { return -code continue } ; return $a }
    proc myp4 m { set a [lindex $m end] ; if {$a>2} { return 100 } ; return $a }
    proc myp5 m { set a [lindex $m end] ; if {$a>2} { return -100 } ; return $a }
    foreach x {1 2 3 4 5} {
        foreach z {0 1 2 3 4 5 6} { set $z {{} {} {} {} {} {}}} 
        set aux [poly split $pol myp$x 0 1 2 3 4]
        set fr {}; 
        foreach var {aux 0 1 2 3 4 5 6} { eval append fr \"-\[llength \$$var\]\" }
        lappend res $fr
        # test whether varsplit gives the same results
        foreach z {0 1 2 3 4 5 6} { set $z {{} {} {} {} {} {}} }
        set aux $pol 
        poly varsplit aux myp$x 0 1 2 3 4
        set sr {}; 
        foreach var {aux 0 1 2 3 4 5 6} { eval append sr \"-\[llength \$$var\]\" }
        if {$fr != $sr} {
            lappend res "(mismatch: $fr!=$sr)"
        } else {
            lappend res ok
        }
    }
    foreach x {1 2 3 4 5 6} { unset $x }
    foreach x {1 2 3 4 5} { rename myp$x "" }
    set res
} [list -0-1-1-1-1-1-6-6 ok -0-1-0-0-0-0-6-6 ok -0-1-0-1-0-1-6-6 ok \
       -0-1-1-1-0-0-6-6 ok -4-1-1-1-0-0-6-6 ok]


foreach prime {2 3 5 7 11 13} {

    test poly-1.10.$prime "poly posmult, binom-$prime" {
        set res {}
        set pol1 [set one {{1 0 0 0}}]
        set pol2 {{1 0 1 0} {1 0 {0 1} 0}}
        for {set i 1} {$i<=$prime} {incr i} {
            set pol1 [poly posmult $pol1 $pol2 $prime]
            for {set j 0} {$j<=$i} {incr j} {
                set cf [poly coeff $pol1 [list 0 0 [list $j [expr $i-$j]] 0]]
                set bn [prime $prime binom $i $j]
                if {$cf!=$bn} { lappend res "coeffs:$cf!=$bn" }
            }
            set ln [llength $pol1]
            if {($i<$prime) && ($ln!=[expr 1+$i])} { 
                lappend res "length:$ln!=[expr 1+$i]" 
            }
        }
        set res
    } {}

    test poly-1.11.$prime "poly negmult, binom-$prime" {
        set res {}
        set pol1 [set one {{1 -1 -1 0}}]
        set pol2 {{1 -1 -2 0} {1 -1 {-1 -2} 0}}
        for {set i 1} {$i<=$prime} {incr i} {
            set pol1 [poly negmult $pol1 $pol2 $prime]
            for {set j 0} {$j<=$i} {incr j} {
                set cf [poly coeff $pol1 [list 0 -1 [list [expr -1-$j] [expr -1-$i+$j]] 0]]
                set bn [prime $prime binom $i $j]
                if {$cf!=$bn} { lappend res "coeffs:$cf!=$bn" }
            }
            set ln [llength $pol1]
            if {($i<$prime) && ($ln!=[expr 1+$i])} { 
                lappend res "length:$ln!=[expr 1+$i]" 
            }
        }
        set res
    } {}

}

test poly-1.12 {poly posmult/negmult, signs} {
    set res {}
    foreach {a b} {1 1 2 2 1 2 2 1 1 6 6 1 5 2 2 5 3 4 4 3 
        8 1 1 8 2 8 8 2 10 9 9 10 10 5 5 10} { 
        set po1 [list [list 1 $a 0 0]]
        set po2 [list [list 1 $b 0 0]]
        set aux1 [lindex [poly posmult $po1 $po2] 0 0]
        set po1 [list [list 1 [expr -1-$a] -1 0]]
        set po2 [list [list 1 [expr -1-$b] -1 0]]
        set aux2 [lindex [poly negmult $po1 $po2] 0 0]
        lappend res $aux1
        if {$aux1 != $aux2} { lappend res mismatch! }
    }
    set res
} {{} {} 1 -1 1 1 -1 -1 1 1 -1 1 1 -1 {} {} -1 -1}

proc polycompare {a b} {
    if {[catch {
        set res [expr {![poly compare $a $b]}]
    }]} {
        return 0
    }
    return $res
}
customMatch poly polycompare

foreach ply {
    {{1 0 0 1}} 
    {{4 0 1 3} {2 0 1 3} {1 2 0 0} {3 2 1 0}} 
    {{0 2 0 0}}
} {
    test poly "poly foreach (reassembly, $ply)" -body [subst -nocommands {
        set uhu {}
        set ply { $ply }
        poly foreach [set ply] myvar {
            lappend uhu [set myvar]
        }
        set uhu
    }] -result $ply -match poly
}


# --------------------------------------------------------------------------

# cleanup
::tcltest::cleanupTests
return

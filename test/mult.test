# -*- tcl -*-
#
# This file contains some multiplication routine tests
#
# Copyright (C) 2004 Christian Nassau <nassau@nullhomotopie.de>
#
#  $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

lappend auto_path ../lib
package require Steenrod 0.75

namespace import -force steenrod::*

test mult-hangup-1.0 {endless loop} {
    monomap d
    d set {1 0 {} 0} {{1 1 {} 0}}
    d set {1 0 {} 1} {{1 0 1 0}}
    d set  {1 0 {} 2} {{1 0 5 0}}
    enumerator p {*}[join "{-prime 5} {-algebra {0 511 {8 7 6 5 4 3 2 1} 0}} {-profile {0 254 {8 8 8 8 8 8 8 8} 0}} {-signature {0 0 {} 0}} {-type positive} {-ideg 1} {-edeg 1} {-hdeg {}} {-genlist {{0 1 1} {1 8 0} {2 40 0}}}"]
    enumerator n {*}[join  "{-prime 5} {-algebra {0 511 {8 7 6 5 4 3 2 1} 0}} {-profile {0 254 {8 8 8 8 8 8 8 8} 0}} {-signature {0 0 {} 0}} {-type positive} {-ideg 1} {-edeg 1} {-hdeg {}} {-genlist {{0 0 0}}}"]
    enumerator p {*}[join "{-prime 5} {-algebra {0 511 {8 7 6 5 4 3 2 1} 0}} {-profile {0 254 {8 7 6 5 4 3 2 1} 0}} {-signature {0 0 {} 0}} {-type positive} {-ideg 1} {-edeg 1} {-hdeg {}} {-genlist {{0 1 1} {1 8 0} {2 40 0}}}"]
    enumerator n {*}[join  "{-prime 5} {-algebra {0 511 {8 7 6 5 4 3 2 1} 0}} {-profile {0 254 {8 7 6 5 4 3 2 1} 0}} {-signature {0 0 {} 0}} {-type positive} {-ideg 1} {-edeg 1} {-hdeg {}} {-genlist {{0 0 0}}}"]
    steenrod::ComputeMatrix p d n 
    set res dummy
} dummy

# --------------

set mult-test-counter 0
proc mult-test {prime f1 f2 res {isbig 0}} {
    global mult-test-counter
    lappend bdy [list set f1 $f1]
    lappend bdy [list set f2 $f2]
    lappend bdy [list set expected $res]
    lappend bdy [subst -nocommands \
                     {set product [poly steenmult [set f1] [set f2] $prime]}]
    lappend bdy {set rc [poly compare [set product] [set expected]]}
    lappend bdy {expr {$rc ? $product : "ok"}}
    lappend cmd test mult-test-[incr mult-test-counter] 
    lappend cmd "multiplication at $prime"
    if {$isbig} {lappend cmd BIGTEST}
    lappend cmd [join $bdy \n] ok
    eval $cmd
}

# --------------------------------------------------------------------------

mult-test 3 {{1 0 1 1}} {{1 0 3 0}} {{1 0 4 0}}

# source some external multiplication tests

set flist [glob -nocomplain -d [file dirname [info script]] mult*.dat] 

foreach fname [lsort -dictionary $flist] {
    puts "  => [file tail $fname]"
    source $fname
}

# --------------------------------------------------------------------------



# cleanup
::tcltest::cleanupTests
return


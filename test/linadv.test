# -*- tcl -*-
#
# A test suite for the advanced linear algebra routines
#
# Copyright (C) 2004-2018 Christian Nassau <nassau@nullhomotopie.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

if {[file exists pkgIndex.tcl]} {
    set dir [pwd]
    source pkgIndex.tcl
    set auto_path something_useless
}
package require Steenrod
namespace import -force steenrod::*

# the list of primes that we test. primes >= 29
# are too big for or our one-byte enty restriction.
set primes {2 3 5 7 11 13 17 23}
#set primes 13

# default size for our matrix tests. note that
# in the sse version of the library the data
# is processed in blocks of 16 entries, so N
# should be >= 16.
foreach p $primes {
    set N($p) 20
}

# The optimized matrix code at the prime 2
# represents entries by bits of an int, so
# testmatrices should be >= 64.
set N(2) 80

# a test template that checks whether the ortho
# subcommand computes the rank correctly
proc ortho-rank-test {prime cnt inmat rank} {
    foreach {rows cols} [matrix dimensions $inmat] break
    set kerdim [expr {$rows - $rank}]
    lappend bdy [list set mat $inmat]
    lappend bdy "matrix ortho $prime mat ker"
    #lappend bdy {puts mat=$mat;puts ker=$ker}
    lappend bdy {set res {}}
    lappend bdy {lappend res [lindex [matrix dimensions $mat] 0]}
    lappend bdy {lappend res [lindex [matrix dimensions $ker] 0]}
    test ortho-rank-test-$prime-$cnt \
        "rank test $prime\#$cnt" [join $bdy \n] [list $rank $kerdim]
}

ortho-rank-test 3 1 {
    {0 0 2 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0}
    {0 0 1 0 1 0 1 0 0 2 0 0 0 0 0 0 0 0 0 0 0 2}
    {0 0 0 0 2 0 1 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0}
    {0 0 2 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 1}
    {0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0}
} 4

proc rint max {expr {int(rand()*$max)}}
proc rvec {len max} {
    set res {}
    while {[incr len -1] >= 0} {
        lappend res [rint $max]
    }
    set res
}
proc rmat {rows cols max} {
    set res {}
    while {[incr rows -1] >= 0} {
        lappend res [rvec $cols $max]
    }
    set res
}

proc diagmatrix {size val} {
    set res [matrix create $size $size]
    for {set i 0} {$i<$size} {incr i} {
        lset res $i $i $val
    }
    return $res
}

proc unitmatrix size {diagmatrix $size 1}

foreach p $primes {
    set idmat [unitmatrix $N($p)]
    for {set i 0} {$i<$N($p)} {incr i} {
        ortho-rank-test $p "unit-rank-$i/$N($p)-at-$p" [lrange $idmat 1 $i] $i
    }
}

foreach p $primes {
    set idmat [matrix create $N($p) $N($p)]
    for {set i 0} {$i<$N($p)} {incr i} {
        ortho-rank-test $p "zero-rank-$i/$N($p)-at-$p" [lrange $idmat 1 $i] 0
    }
}


for {set i 0} {$i<10} {incr i} {
    set randmat [rmat $N($p) $N($p) 100]
    set bdy {}
    lappend bdy [list set mat $randmat]
    lappend bdy [list matrix addto mat $randmat -1]
    lappend bdy {expr {[matrix iszero $mat] ? "ok" : "oops"}}
    test "self-annihilation (\#$i)" "A - A == 0" [join $bdy \n] ok
}

for {set i 0} {$i<3} {incr i} {
    foreach p $primes {
        set randmat [rmat [expr {3*$i}] $N($p) $p]
        set bdy {}
        lappend bdy [list set mat $randmat]
        for {set k 1} {$k < $p} {incr k} {
            lappend bdy [list matrix addto mat $randmat 1 $p]
        }
        lappend bdy {expr {[matrix iszero $mat] ? "ok" : $mat}}
        test "self-annihilation-mod-$p (\#$i)" \
            "A + ... + A == 0 mod $p" [join $bdy \n] ok
    }
}

foreach row [unitmatrix $N($p)] {
    test "matrix iszero" $row [list matrix iszero [list $row]] 0
}

foreach row [diagmatrix $N($p) -1] {
    test "matrix iszero" $row [list matrix iszero [list $row]] 0
}

set m [matrix create $N($p) $N($p)]
test "matrix iszero" $m [list matrix iszero $m] 1

proc self-liftvar-test {mat p} {
    set m2 $mat
    # Note: according to the spec, "matrix liftvar" requires
    # that its input has been prepared by "matrix ortho"
    matrix ortho $p m2 ker
    set bdy [subst -nocommands {
        set mat {$mat}
        set m2 {$m2}
        set lft [matrix liftvar $p m2 mat]
        lappend res [lindex [matrix dimensions [set lft]] 0]
        lappend res [matrix iszero [set mat]]
        set res
    }]
    foreach {rows cols} [matrix dimensions $mat] break
    test "self-liftvar-test" "prime $p" $bdy [list $rows 1]
}

foreach p $primes {
    for {set i 0} {$i<10} {incr i} {
        set rmt [rmat $N($p) $N($p) $p]
        self-liftvar-test $rmt $p
    }
}

proc self-lift-test {mat p} {
    foreach {rows cols} [matrix dimensions $mat] break
    set m2 $mat
    # Note: according to the spec, "matrix lift" requires
    # that its input has been prepared by "matrix ortho"
    matrix ortho $p m2 "" bas
    set bdy [subst -nocommands {
        set mat {$mat}
        set mtc {$mat}
        set m2  {$m2}
        set bas {$bas}
        set matvalcopy [set mat]
        set lft [matrix lift $p [set m2] [set bas] mat]
        set lhs [matrix multiply $p [set lft] [set mtc]]
        set rhs [set mtc]
        lappend res [lindex [matrix dimensions [set lft]] 0]
        lappend res [matrix iszero [set mat]]
        lappend res [expr {[set lhs] eq [set rhs]}]
        set res
    }]
    test "self-lift-test" "prime $p" $bdy [list $rows 1 1]
}

foreach p $primes {
    for {set i 0} {$i<10} {incr i} {
        set rmt [rmat $N($p) $N($p) $p]
        self-lift-test $rmt $p
    }
}

self-lift-test 1 2

proc self-quot-test {mat p} {
    set m2 $mat
    # Note: according to the spec, "matrix quot" requires
    # that its input has been prepared by "matrix ortho"
    matrix ortho $p m2 ker
    set bdy [subst -nocommands {
        set mat {$m2}
        matrix quot $p mat {$m2}
        lappend res [lindex [matrix dimensions [set mat]] 0]
        set mat {$mat}
        matrix quot $p mat {$m2}
        lappend res [lindex [matrix dimensions [set mat]] 0]
    }]
    test "self-quot-test" "prime $p" $bdy [list 0 0]
}

foreach p $primes {
    for {set i 0} {$i<10} {incr i} {
        set rmt [rmat $N($p) $N($p) $p]
        self-quot-test $rmt $p
    }
}

proc ortho-basis-test {mat p} {
    set themat \{$mat\}
    if {$p == 2} {
        set themat [subst -nocommands {[matrix convert2 {$mat}]}]
    }
    set bdy [subst -nocommands {
        set mcpy [set mat $themat]
        matrix ortho $p mat ker nbas
        # check mat == nbas * mcpy
        set aux [matrix multiply $p [set nbas] [set mcpy]]
        matrix addto aux [set mat] -1
        expr {([matrix iszero [set aux]]) ? "ok" : "mismatch"}
    }]
    test "ortho-basis-test" "prime $p" $bdy "ok"
}

foreach p $primes {
    for {set i 0} {$i<10} {incr i} {
        set rmt [rmat $N($p) $N($p) $p]
        ortho-basis-test $rmt $p
    }
}

test "multiplication" "mismatch" {
    catch {matrix multiply 3 {{1 0 0} {0 1 1}} {{1 0 0} {0 1 1}} }
} 1

test "multiplication" "simple test" {
    set m [matrix multiply 3 {{1 2 3} {4 5 6}} {{1 2} {3 4} {5 6}}]
    matrix addto m {{1 1} {1 1}} -1
    matrix iszero $m
} 1


test "segfault" "sage 1" {
    set m {
	{3 2 0 3 0 1 0}
    }
    set n {
	{0 0 2 0 -3 0 0} {1 4 0 1 0 2 0} {0 0 4 0 0 0 0} {0 0 4 0 0 0 -1} {0 0 0 0 3 0 0} {0 0 0 0 4 0 1} {0 0 0 0 0 0 2}
    }
    steenrod::matrix liftvar 5 n m
    set m ok
} ok

test "quotient modulo empty matrix" "sage 2" {
    set m 4
    steenrod::matrix quot 5 m {}
    steenrod::matrix dimensions $m
} {1 1}


# cleanup
::tcltest::cleanupTests
return
